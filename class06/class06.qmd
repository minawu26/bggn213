---
title: "class06 R Functions"
author: "Mina Wu (A59013200)"
date: 26-Jan-2024
format: pdf
editor: visual
---

# Our first simple function 

All functions in R have 3 parts. They have: 

- a name 
- input arguments(none, one or more) 
- a body

A function to add two numbers 

```{r} 
sillyadd <- function(x,y=1){
  x+y
}
```

Let me try out this function 

```{r}
sillyadd(100)
```

# Let's do something more useful
Paste the student's grade in to the chuck. 
```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

I will begin by getting a skateboard solution to my tesla problem. 

```{r}
  mean(student1)
```
which.min gives the position of the minimum value in the vector. 
```{r}
min(student1)
which.min(student1)
```


```{r}
x <- student3
x
# Find lowest value
ind <- which.min(x)
ind
#Exclude lowest value and find mean and replace Na with 0. 
x[is.na(x)] <- 0
mean (x[-ind], na.rm= TRUE)

```

Find and replace the NA values with zero 

```{r}
x<- 1:5
x
x[x==3]<- 10000
x
```

```{r}
x<- student2
x
x[is.na(x)] <- 0
x
```


Turn it into function called grade
```{r}
grade <- function(x){
  x[is.na(x)] <- 0
  x= mean (x[-which.min(x)])
  x
}

```

Test out the grade function with student1,2, or 3. 
```{r}
grade(student1)
```
Read a class gradebook CSV file from here: "https://tinyurl.com/gradeinput"
```{r}
url <-"https://tinyurl.com/gradeinput"
gradebook <- read.csv(url, row.names=1)
head(gradebook)
```

Now use our `grade()` function to grade the whole class...
We can "apply" our new `grade()` function over whether the rows or the columns of the gradebook, with MARGIN=1 or MARGIN=2. Use MARGIN1, which is for the rows. 
```{r}
results <-apply(gradebook,1, grade)
results
```

Q2: Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook?
```{r}
#which student have the highest score
which.max(results)
# what is the highest score
max(results)

```


Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]. 

```{r}
apply(gradebook,2, grade)
```


Use apply, but it gives NA values 
```{r}
apply(gradebook, 2, mean)

```
Rewrite the grade function to drop the lowest score. 
```{r}
grade <- function(x, drop.lowest= TRUE){
  x[is.na(x)] <- 0
  
  if (drop.lowest){
    ans <- mean (x[-which.min(x)])
  }
 else{
   ans<- mean(x)
 }
  ans
}
```

Remove Na using na.rm = TRUE. HW3 is the toughest assignment. 
```{r}
toughest_assignment<- apply(gradebook, 2, mean, na.rm=T)
which.min(toughest_assignment)
#HW3 is the toughest assignment.
```
Side question: about ... and what it does in a function
```{r}
plotme<- function(x,...){
  plot(x,...)
}
plotme (1:10, col= "blue", type= "l")
```
Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? [1pt]

mask the Na score to 0
```{r}
mask <- gradebook 
mask[is.na(mask)] <- 0
mask
```
give us correlation on hw3 and hw5
```{r}
cor(mask$hw5, results)
cor(mask$hw3, results)
```

Use apply to look for the correlation of each hw.
```{r}
correlation <- apply(mask, 2, cor,y=results)
correlation
which.max(correlation)
#HW5  is the predictive of overall score
```

