---
title: "Class 05: Data Viz with ggplot"
author: "Mina Wu (PID: A59013200)"
date: 01/24/24
format: pdf
---

#Graphics systems in R

There are many graphics systems for R. These include so-called *"base R"* and those in add-on packages like `ggplot2`.

```{r}
plot(cars)
```

How can we make this with `ggplot2`.

This is an add-on package and I first need to install it on my computer.This install is a one time only deal.

To install any package, I use the `install.packages` function.

To use it, we need to load up the package from our library of install packages.For this, I use library `(ggplot2)`

```{r}
library (ggplot2)
ggplot(cars)

```

Using ggplot is not as strightforward as base R plot for basic plots. I have some more typing to do.

Every ggplot has at least 3 things (layers):

-data (data.frame) -aes(how the data map to the lpot) -geoms (think of this as the type of plot, e.g. points, lines, etc.)

```{r}
ggplot(cars)+
  aes(x=speed, y=dist)
```

Here ggplot was more verbose- i.e. I had more typing to do- than base R. However, I can add more layers to make nicer and more complicated plots in an easy way with ggplot.

```{r}
p <- ggplot(cars)+
  aes(x=speed, y=dist)+
  geom_point()+
  geom_smooth()+
  labs(title= "Stopping Distance of Old Cars") +
  theme_bw()
```

Use patchwork for combining plots to make an all-in-one multi-panel figure. install.packages("patchwork")

```{r}
library (patchwork)
(p|p)/p
```

Make it a smooth line without the shade

```{r}
 ggplot(cars)+
  aes(x=speed, y=dist)+
  geom_point()+
  geom_smooth (method= "lm", se= FALSE)+ 
  labs(title= "Stopping Distance of Old Cars")+ 
  theme_bw()

```

6.  Creating Scatter Plots

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)

```

Q. Use the nrow() function to find out how many genes are in this dataset. What is your answer?

```{r}
nrow(genes)

```

Q. Use the colnames() function and the ncol() function on the genes data frame to find out what the column names are (we will need these later) and how many columns there are. How many columns did you find?

```{r}
colnames(genes)
```

```{r}
ncol(genes)
```

Q.Use the table() function on the State column of this data.frame to find out how many ‘up’ regulated genes there are. What is your answer? 127

```{r}
table(genes$State)
```

Q. Using your values above and 2 significant figures. What fraction of total genes is up-regulated in this dataset?

```{r}
round (table(genes$State)/nrow(genes)*100,2)
```

Plot the Genes dataset

```{r}
ggplot(genes)+
  aes(x=Condition1, y= Condition2)+
  geom_point()
```

Add State column to the dataset to differentiate the genes condition (down, unchanging, and up) and save the plot as `p`.

```{r}
p2 <- ggplot(genes)+
  aes(x=Condition1, y= Condition2, col=State)+
  geom_point()
```

Change the state color, add title, and change the x and y axis.

```{r}
p3 <- p2 + scale_colour_manual(values=c("blue","gray","red"))+
  labs (title= "Gene Expression Changes Upon Drug Treatment", x= "Control (no drug)", y= "Drug Treatment")
plot(p3)
```

Add an interactive version with plotly.install.packages("plotly")

```{r}
#| message: false
library(plotly)
#ggplotly(p3)
```

7.  Going Further. install.packages("dplyr"); install.packages("gapminder")

```{r}
library(dplyr)
library(gapminder)
gapminder_2007 <- gapminder %>% filter(year==2007)
```

Q. Complete the code below to produce a first basic scatter plot of this gapminder_2007 dataset:

```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point(alpha =0.5)

```

Adding more varables to aes() by adding color to the continent and size to the population

```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
  geom_point(alpha=0.5)
```

color points by the numeric variable population

```{r}
ggplot(gapminder_2007) + 
  aes(x = gdpPercap, y = lifeExp, color = pop) +
  geom_point(alpha=0.8)

```

Adjust the point size of the data

```{r}
ggplot(gapminder_2007) + 
  geom_point(aes(x = gdpPercap, y = lifeExp,
                 size = pop), alpha=0.5) + 
  scale_size_area(max_size = 10)
```

-Q. Can you adapt the code you have learned thus far to reproduce our gapminder scatter plot for the year 1957? What do you notice about this plot is it easy to compare with the one for 2007? Including the color for each continent is easier to interpret and visualize

```{r}
gapminder_1957 <- gapminder %>% filter(year==1957)
ggplot(gapminder_1957)+
  aes(x=gdpPercap, y= lifeExp, color=continent, size= pop)+
  geom_point(alpha= 0.7)+
  scale_size_area(max_size =15)
```

Include the 1957 and 2007 plots together with facet_wrap function

```{r}
gapminder_1957 <- gapminder %>% filter(year==1957| year==2007)
ggplot(gapminder_1957)+
  aes(x=gdpPercap, y= lifeExp, color=continent, size= pop)+
  geom_point(alpha= 0.7)+
  scale_size_area(max_size =15)+ 
  facet_wrap(~year)

```

Bar Charts

```{r}
gapminder_top5 <- gapminder %>% 
  filter(year==2007) %>% 
  arrange(desc(pop)) %>% 
  top_n(5, pop)

gapminder_top5
```

create a simple bar charts

```{r}
ggplot(gapminder_top5) + 
  geom_col(aes(x = country, y = pop))
```

Plot the top five biggest countries by population in 2007 using Bar graph

```{r}
ggplot(gapminder_top5) + 
  aes(x = country, y = pop, fill=gdpPercap)+
  geom_col()
             
```

Change the order of the bars

```{r}
ggplot(gapminder_top5) +
  aes(x=reorder(country, -pop), y=pop, fill=gdpPercap) +
  geom_col()
```

and fill by country

```{r}
ggplot(gapminder_top5) +
  aes(x=reorder(country, -pop), y=pop, fill=country) +
  geom_col(col= "gray30")+
  guides (fill= "none")
```

Flipping (rotate) bar chars with coord_flip() function on USArrests dataset

```{r}
head(USArrests)
```

Use corrd_flip function

```{r}
USArrests$State <- rownames(USArrests)
ggplot(USArrests) +
  aes(x=reorder(State,Murder), y=Murder) +
  geom_col() +
  coord_flip()
```

Using geom_point and geom_segment function to for better visualization

```{r}
ggplot(USArrests) +
  aes(x=reorder(State,Murder), y=Murder) +
  geom_point() +
  geom_segment(aes(x=State, 
                   xend=State, 
                   y=0, 
                   yend=Murder), color="blue") +
  coord_flip()
```
